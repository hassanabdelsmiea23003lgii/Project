/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package shop_pos;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public final class Products extends javax.swing.JFrame {
public int total_Products ;
public String c_category ;
    /**
     * Creates new form Cat
     */
    public Products() {
        initComponents();
        tb_load();
        Product_list.getColumnModel().getColumn(0).setPreferredWidth(1);
        Product_list.getColumnModel().getColumn(1).setPreferredWidth(260);
        Product_list.getColumnModel().getColumn(2).setPreferredWidth(20);
        Product_list.getColumnModel().getColumn(3).setPreferredWidth(1);
        Product_list.getColumnModel().getColumn(4).setPreferredWidth(1);
        imgload();
        
        
    }
    
public void imgload() {
    
    
    
    
//    try {
//        Image image = null;    
//        //URL url = new URL("https://fakeimg.pl/200x100");
//        //URL url = new URL("https://s3.amazonaws.com/helpcenter-prod.kommunicate/profile_pic/16733362376461673336237147-image919.png");
//        //URL url = new URL("https://www.patpat.lk/resources/images/patpat-lk-logo.png");
//        URL url = new URL("https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg");
//        image = ImageIO.read(url);
//        jimg.setIcon(new ImageIcon(image));
// 
//         
//     } catch (IOException e) {
//         
//         System.out.println(e);
//         
//     }

}
public void tb_load() {
      //table
      
    DefaultTableModel dt = (DefaultTableModel) Product_list.getModel();
    dt.setRowCount(0);

    try (Statement s = (Statement) db.mycon().createStatement();
         ResultSet rs = s.executeQuery("SELECT * FROM products")) {

        while (rs.next()) {
            Object[] rowData = {rs.getString(1),
                rs.getString(2),rs.getString(3),
                rs.getString(4),rs.getString(5)};
            dt.addRow(rowData);
            total_Products++;
        }
        
        
    } catch (SQLException e) {
        System.out.println(e);
    }
    //combo box
    DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();

        try (Statement s = db.mycon().createStatement();
             ResultSet rs = s.executeQuery("SELECT * FROM Category")) {

            while (rs.next()) {
                String data = rs.getString("Name"); // Change "ColumnName" to the actual column name
                comboBoxModel.addElement(data);
                
            }

        } catch (SQLException e) {
            System.out.println(e);
        }
        
        combo_category.setModel(comboBoxModel);
  
}

public void category_load() {
    
    DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
    String cat_ID = c_category;

    try {
        Statement s = db.mycon().createStatement();
        ResultSet rs = s.executeQuery("SELECT * FROM Category");

        while (rs.next()) {
            String id = rs.getString("id");
            String name = rs.getString("Name");
            comboBoxModel.addElement(name);

            // Check if the current category matches the specified cat_ID
            if (id.equals(cat_ID)) {
                comboBoxModel.setSelectedItem(name); // Select the matching category in the ComboBox
            }
        }
    } catch (SQLException e) {
        System.out.println(e);
    }

    combo_category.setModel(comboBoxModel);
}

   
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        c_name = new javax.swing.JTextField();
        c_id = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        c_price = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        combo_category = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        c_Barcode = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jimg = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Product_list = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        c_search = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Free POS Software.Simple POS for Small Businesses. Youtube.com/c/Dappcode and Youtube.com/@sasindu");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Contact Person"));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Name :");

        c_name.setColumns(5);
        c_name.setFont(new java.awt.Font("Iskoola Pota", 0, 30)); // NOI18N

        c_id.setEditable(false);
        c_id.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("ID :");

        c_price.setColumns(5);
        c_price.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Price :");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Category :");

        combo_category.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        combo_category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cat" }));
        combo_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_categoryActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Barcode :");

        c_Barcode.setColumns(5);
        c_Barcode.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton3.setText("Print Barcode");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton5.setText("Save Barcode");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton6.setText("Print QR Code");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton7.setText("Save QR Code");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(c_name, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(c_id, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(c_price, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(combo_category, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(c_Barcode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jButton7))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(c_id, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(c_name, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(c_price, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(c_Barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_category, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton1.setText("Delete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton4.setText("Save New");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(194, 194, 194)
                .addComponent(jimg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jimg, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Product_list.setFont(new java.awt.Font("Iskoola Pota", 0, 25)); // NOI18N
        Product_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Category", "Barcode"
            }
        ));
        Product_list.setRowHeight(30);
        Product_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Product_listMouseClicked(evt);
            }
        });
        Product_list.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Product_listKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(Product_list);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Search ID/Name :");

        c_search.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        c_search.setText("0");
        c_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                c_searchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3)
                .addGap(30, 30, 30)
                .addComponent(c_search, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(c_search, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("One Category Have Max 36 Products Only for Best view.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void c_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_c_searchKeyReleased
      
     String your_desired_id = c_search.getText();

        DefaultTableModel dt = (DefaultTableModel) Product_list.getModel();
        dt.setRowCount(0);

        if (your_desired_id == null || your_desired_id.isEmpty()) {
            tb_load();
        } else {
            try (Statement s = db.mycon().createStatement()) {
                String query = "SELECT * FROM Products WHERE ID LIKE '%" + your_desired_id + "%' OR name LIKE '%"+your_desired_id+"%' ";
                try (ResultSet rs = s.executeQuery(query)) {
                    while (rs.next()) {
                        Object[] rowData = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5)}; // 
                        dt.addRow(rowData);
                    }
                }
            } catch (SQLException e) {
                tb_load();
                System.out.println(e);
            }
        }

    }//GEN-LAST:event_c_searchKeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      
               
    String id = c_id.getText();
    String name = c_name.getText();
    String price = c_price.getText();
    String category = c_category;
    String getBarcode = c_Barcode.getText();

        // Check if the name has more than 20 characters
    if (name.length() > 20) {
            JOptionPane.showMessageDialog(null, "Name should be 20 characters or less.");
        } else {
            
            try (Statement s = db.mycon().createStatement()) {
                String query = "INSERT INTO Products (Name,Price,Category,Barcode) VALUES ('" + name + "','" + price + "','" + category + "','" + getBarcode + "')";
                s.executeUpdate(query);
                JOptionPane.showMessageDialog(null, "Data Saved");
                
            } catch (SQLException e) {
                System.out.println(e);
                tb_load();
            }
            tb_load();
        }
        
        c_id.setText("");
        c_name.setText("");
        c_price.setText("");
        c_Barcode.setText("");
        c_category ="";

        
            
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
    String id = c_id.getText();
    String name = c_name.getText();
    String price = c_price.getText();
    String getBarcode = c_Barcode.getText();

        // Check if the name has more than 15 characters
    if (name.length() > 20) {
            JOptionPane.showMessageDialog(null, "Name should be 20 characters or less.");
        } else {
            try (PreparedStatement preparedStatement = db.mycon().prepareStatement("UPDATE Products SET Name=?, Price=?, Category=? ,Barcode=? WHERE id=?")) {
                preparedStatement.setString(1, name);
                preparedStatement.setString(2, price);
                preparedStatement.setString(3, c_category);
                preparedStatement.setString(4, getBarcode);
                preparedStatement.setString(5, id);

                int updatedRows = preparedStatement.executeUpdate();
                if (updatedRows > 0) {
                    JOptionPane.showMessageDialog(null, "Data Updated");
                } else {
                    JOptionPane.showMessageDialog(null, "No records were updated. Check the ID.");
                }
            } catch (SQLException e) {
                System.out.println(e);
            }
        }

        // Clear the text fields
        c_id.setText("");
        c_name.setText("");
        c_price.setText("");
        c_Barcode.setText("");
        c_category="";

        // Refresh the table (assuming tb_load() function is used to populate the table)
        tb_load();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
    String id = c_id.getText();

        try {
            Statement s = db.mycon().createStatement();
            s.executeUpdate("DELETE FROM Products WHERE id = '" + id + "'");
            JOptionPane.showMessageDialog(null, "Data Deleted");
        } catch (SQLException e) {
            System.out.println(e);
            tb_load(); // Load the table again in case of an exception during deletion
        }

        tb_load(); // Reload the table after the delete operation

        c_id.setText("");
        c_name.setText("");
        c_price.setText("");
        c_Barcode.setText("");
        c_category = "";

    }//GEN-LAST:event_jButton1ActionPerformed

    private void Product_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Product_listMouseClicked
        
        //c_name.setFont(new Font("Arial Unicode MS", Font.PLAIN, 12));

        
        int r = Product_list.getSelectedRow();
       
       c_id.setText(Product_list.getValueAt(r, 0).toString());
       c_name.setText(Product_list.getValueAt(r, 1).toString());
       c_price.setText(Product_list.getValueAt(r, 2).toString());
       c_category= Product_list.getValueAt(r, 3).toString();
       c_Barcode.setText(Product_list.getValueAt(r, 4).toString());
       
       System.out.println(c_name.getText());
       category_load();
    }//GEN-LAST:event_Product_listMouseClicked

    private void combo_categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_categoryActionPerformed
     
        String name = (String) combo_category.getSelectedItem();
          
        try {
              String sql = "SELECT * FROM category WHERE Name = ?";
              PreparedStatement prst = db.mycon().prepareStatement(sql);
              prst.setString(1, name); // Set the name as a parameter to avoid SQL injection
              ResultSet rs = prst.executeQuery();

              while (rs.next()) {
                  // Assuming c_category is a JTextField to display the category name
                  c_category = rs.getString("id");
              }
          } catch (SQLException ex) {
              System.out.println(ex);
          }

    }//GEN-LAST:event_combo_categoryActionPerformed

    private void Product_listKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Product_listKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_Product_listKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        String barcodeData = c_Barcode.getText(); // Data you want to encode
        String labelText = c_name.getText(); // Text to display below the barcode
        String barcodeImageFilePath = "Barcodes/"+barcodeData + ".png"; // Output file path

        int width = 300; // Width of the barcode
        int height = 100; // Height of the barcode

        try {
            // Encode the data into a BitMatrix
            BitMatrix bitMatrix = new MultiFormatWriter().encode(
                    barcodeData, BarcodeFormat.CODE_128, width, height);

            // Create a BufferedImage with a transparent background
            BufferedImage image = new BufferedImage(width, height + 30, BufferedImage.TYPE_INT_ARGB);
            Graphics2D graphics = image.createGraphics();

            // Set the background to transparent
            image = graphics.getDeviceConfiguration().createCompatibleImage(width, height + 30, Transparency.TRANSLUCENT);
            graphics.dispose();
            graphics = image.createGraphics();

            // Draw the barcode onto the image
            for (int x = 0; x < width; x++) {
                for (int y = 0; y < height; y++) {
                    image.setRGB(x, y, bitMatrix.get(x, y) ? Color.BLACK.getRGB() : Color.WHITE.getRGB());
                }
            }

            // Draw the text label below the barcode
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial", Font.PLAIN, 15));
            int labelWidth = graphics.getFontMetrics().stringWidth(labelText);
            graphics.drawString(labelText, (width - labelWidth) / 2, height + 20);

            // Save the image to a file
            File outputFile = new File(barcodeImageFilePath);
            ImageIO.write(image, "png", outputFile);

            System.out.println("Barcode generated successfully with transparent text background.");

            // Print the barcode
            printBarcode(barcodeImageFilePath);
        } catch (Exception e) {
            System.out.println("Error generating/printing barcode: " + e.getMessage());
        }
    }

    private static void printBarcode(String barcodeImageFilePath) throws IOException {
        PrinterJob printerJob = PrinterJob.getPrinterJob();
        if (printerJob.printDialog()) {
            printerJob.setPrintable(new ImagePrintable(new File(barcodeImageFilePath)));
            try {
                printerJob.print();
                System.out.println("Barcode printed successfully.");
            } catch (PrinterException ex) {
                System.out.println("Error printing barcode: " + ex.getMessage());
            }
        } else {
            System.out.println("Printing canceled by user.");
        }
    }

    static class ImagePrintable implements Printable {
        private BufferedImage image;

        public ImagePrintable(File file) throws IOException {
            this.image = ImageIO.read(file);
        }

        @Override
        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
            if (pageIndex > 0) {
                return NO_SUCH_PAGE;
            }

            graphics.drawImage(image, 0, 0, null);
            return PAGE_EXISTS;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        String barcodeData =c_Barcode.getText(); // Data you want to encode
        String barcodeImageFilePath = barcodeData+".png"; // Output file path
        
        int width = 300; // Width of the barcode
        int height = 100; // Height of the barcode
        String labelText = c_name.getText(); // Text to display below the barcode

        try {
            // Encode the data into a BitMatrix
            BitMatrix bitMatrix = new MultiFormatWriter().encode(
                barcodeData, BarcodeFormat.CODE_128, width, height);

            // Create a BufferedImage with a transparent background
            BufferedImage image = new BufferedImage(width, height + 30, BufferedImage.TYPE_INT_ARGB);
            Graphics2D graphics = image.createGraphics();

            // Set the background to transparent
            image = graphics.getDeviceConfiguration().createCompatibleImage(width, height + 30, Transparency.TRANSLUCENT);
            graphics.dispose();
            graphics = image.createGraphics();

            // Draw the barcode onto the image
            for (int x = 0; x < width; x++) {
                for (int y = 0; y < height; y++) {
                    image.setRGB(x, y, bitMatrix.get(x, y) ? Color.BLACK.getRGB() : Color.WHITE.getRGB());
                }
            }

            // Draw the text label below the barcode
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial", Font.PLAIN, 15));
            int labelWidth = graphics.getFontMetrics().stringWidth(labelText);
            graphics.drawString(labelText, (width - labelWidth) / 2, height + 20);

            // Save the image to a file
            File outputFile = new File(barcodeImageFilePath);
            ImageIO.write(image, "png", outputFile);

            System.out.println("Barcode generated successfully with transparent text background.");
        } catch (WriterException | IOException e) {
            
            System.out.println("Error generating barcode: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        String qrCodeData = c_Barcode.getText(); // Data you want to encode
        String labelText = c_name.getText(); // Text to display below the QR code
        String qrCodeImageFilePath ="Barcodes/"+ qrCodeData+".png"; // Output file path
        String combinedData = qrCodeData + "," + labelText;

        int width = 300; // Width of the QR code
        int height = 300; // Height of the QR code

        try {
            // Generate QR code
            BitMatrix bitMatrix = new QRCodeWriter().encode(combinedData, BarcodeFormat.QR_CODE, width, height);
            BufferedImage qrCodeImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            qrCodeImage.createGraphics();

            // Fill QR code image with white color
            Graphics2D graphics = (Graphics2D) qrCodeImage.getGraphics();
            graphics.setColor(Color.WHITE);
            graphics.fillRect(0, 0, width, height);
            graphics.setColor(Color.BLACK);

            // Draw QR code matrix on the image
            for (int x = 0; x < width; x++) {
                for (int y = 0; y < height; y++) {
                    if (bitMatrix.get(x, y)) {
                        graphics.fillRect(x, y, 1, 1);
                    }
                }
            }

            // Add text label below the QR code
            BufferedImage finalImage = new BufferedImage(width, height + 30, BufferedImage.TYPE_INT_RGB);
            graphics = finalImage.createGraphics();
            graphics.setColor(Color.WHITE);
            graphics.fillRect(0, 0, width, height + 30);
            graphics.drawImage(qrCodeImage, 0, 0, null);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial", Font.BOLD, 15));
            int labelWidth = graphics.getFontMetrics().stringWidth(labelText);
            graphics.drawString(labelText, (width - labelWidth) / 2, height + 20);

            // Save the image to a file
            File outputFile = new File(qrCodeImageFilePath);
            ImageIO.write(finalImage, "png", outputFile);

            System.out.println("QR code generated successfully with text label.");

            // Print the QR code
            printQRCode(qrCodeImageFilePath);
        } catch (Exception e) {
            System.out.println("Error generating/printing QR code: " + e.getMessage());
        }
    }

    private static void printQRCode(String qrCodeImageFilePath) throws IOException, PrinterException {
        BufferedImage image = ImageIO.read(new File(qrCodeImageFilePath));
        PrinterJob printerJob = PrinterJob.getPrinterJob();
        printerJob.setPrintable((graphics, pageFormat, pageIndex) -> {
            if (pageIndex > 0) {
                return Printable.NO_SUCH_PAGE;
            }
            graphics.drawImage(image, 0, 0, null);
            return Printable.PAGE_EXISTS;
        });
        if (printerJob.printDialog()) {
            printerJob.print();
            System.out.println("QR code printed successfully.");
        } else {
            System.out.println("Printing canceled by user.");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        
        String qrCodeData = c_Barcode.getText(); // Data you want to encode
        String qrCodeImageFilePath = "Barcodes/"+ qrCodeData + ".png"; // Output file path

        int width = 300; // Width of the QR code
        int height = 300; // Height of the QR code
        String labelText = c_name.getText(); // Text to display below the QR code

        try {
            // Encode the data into a BitMatrix
            BitMatrix bitMatrix = new MultiFormatWriter().encode(
                qrCodeData, BarcodeFormat.QR_CODE, width, height);

            // Create a BufferedImage with a transparent background
            BufferedImage image = new BufferedImage(width, height + 30, BufferedImage.TYPE_INT_ARGB);
            Graphics2D graphics = image.createGraphics();

            // Set the background to transparent
            image = graphics.getDeviceConfiguration().createCompatibleImage(width, height + 30, Transparency.TRANSLUCENT);
            graphics.dispose();
            graphics = image.createGraphics();

            // Draw the QR code matrix onto the image
            for (int x = 0; x < width; x++) {
                for (int y = 0; y < height; y++) {
                    image.setRGB(x, y, bitMatrix.get(x, y) ? Color.BLACK.getRGB() : Color.WHITE.getRGB());
                }
            }

            // Draw the text label below the QR code
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial", Font.PLAIN, 15));
            int labelWidth = graphics.getFontMetrics().stringWidth(labelText);
            graphics.drawString(labelText, (width - labelWidth) / 2, height + 20);

            // Save the image to a file
            File outputFile = new File(qrCodeImageFilePath);
            ImageIO.write(image, "png", outputFile);

            System.out.println("QR code generated successfully with transparent text background.");
        } catch (WriterException | IOException e) {
            
            System.out.println("Error generating QR code: " + e.getMessage());
        }
    
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Products().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Product_list;
    private javax.swing.JTextField c_Barcode;
    private javax.swing.JTextField c_id;
    private javax.swing.JTextField c_name;
    private javax.swing.JTextField c_price;
    private javax.swing.JTextField c_search;
    private javax.swing.JComboBox<String> combo_category;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jimg;
    // End of variables declaration//GEN-END:variables
}
